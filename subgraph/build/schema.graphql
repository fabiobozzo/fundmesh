type Project @entity {
  id: ID!
  projectAddress: Bytes!
  owner: Bytes!
  name: String!
  description: String!
  imageCid: String!
  cid: String!
  minimumContribution: BigInt!
  targetContribution: BigInt!
  deadline: BigInt!
  contributorsCount: BigInt!
  currentBalance: BigInt!
  progressRatio: BigDecimal!
  trendingScore: BigDecimal!
  createdAt: BigInt!
  completed: Boolean!
  completedAt: BigInt
  approved: Boolean!
  approvedAt: BigInt
  approvalsCount: BigInt!
  milestones: [Milestone!]! @derivedFrom(field: "project")
  activities: [Activity!]! @derivedFrom(field: "project")
}

type Milestone @entity {
  id: ID!
  project: Project!
  index: BigInt!
  description: String!
  threshold: BigInt!
  recipient: Bytes!
  approved: Boolean!
  approvedAt: BigInt
  approvalsCount: BigInt!
  completed: Boolean!
  completedAt: BigInt
}

type Activity @entity {
  id: ID!
  project: Project!
  type: String!  # PROJECT_CREATED, CONTRIBUTION, PROJECT_APPROVAL_SUBMITTED, PROJECT_APPROVED, PROJECT_COMPLETED, 
                 # MILESTONE_APPROVAL_SUBMITTED, MILESTONE_APPROVED, MILESTONE_COMPLETED, REWARD_CLAIMED
  actor: Bytes!  # address that triggered the activity
  data: String!  # JSON string with activity-specific data
  timestamp: BigInt!
  blockNumber: BigInt!
}